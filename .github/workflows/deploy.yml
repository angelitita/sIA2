name: Generar y Publicar Nuevo Post

on:
  # Permite ejecutarlo manualmente desde la pesta√±a Actions en GitHub
  workflow_dispatch:

  # Ejecuta el script autom√°ticamente en un horario programado
  schedule:
    # Esta configuraci√≥n ejecuta el script cada 6 horas (4 veces al d√≠a)
    - cron: '0 */6 * * *'

# Permisos necesarios para que la acci√≥n pueda escribir en tu repositorio
permissions:
  contents: write

jobs:
  build-and-commit:
    # Se ejecutar√° en un servidor de Ubuntu
    runs-on: ubuntu-latest

    steps:
      # 1. Clona tu repositorio para tener acceso a los archivos
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      # 2. Configura el entorno de Python en la versi√≥n 3.10
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. Instala las librer√≠as necesarias desde tu archivo requirements.txt
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Ejecuta el script de Python para generar el contenido
      #    Usa un "secret" de GitHub para la API Key, ¬°nunca la pongas directamente!
      - name: Generar nuevo post
        run: python generar_post.py
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}

      # 5. Configura Git y sube los nuevos archivos generados al repositorio
      - name: Hacer commit de los archivos generados
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # Mensaje del commit que aparecer√° en tu historial de Git
          commit_message: "ü§ñ Nuevo post automatizado"
